The 0-add_integer test module
=================================

import from the module:

	>>> add_integer = __import__('0-add_integer').add_integer

check for module docstring:

	>>> mo = __import__("0-add_integer").__doc__
    	>>> len(mo) > 1 
    	True

check for function docstring:
	>>> fun = __import__("0-add_integer").add_integer.__doc__
	>>> len(fun) > 1
	True

Start test:
Basic:

    	>>> add_integer(1, 2)
    	3

int:
	>>> add_integer(2)
	100

default second arg:
	>>> add_integer(0)
	98

negative:
	>>> add_integer(100, -2)
	98

float overflow:
	>>> add_integer(1500.5)
    	1598

Float NaN:

    	>>> add_integer(float('NaN'))
    	Traceback (most recent call last):
    	...
    	ValueError: cannot convert float NaN to integer

string:
	>>>add_integer(4, "lion")
	Traceback (most recent call last):
    	...
    	TypeError: b must be an integer
	
none:
	>>> add_integer(None)
    	Traceback (most recent call last):
    	...
    	TypeError: a must be an integer

	>>> add_integer(2.3, None)
    	Traceback (most recent call last):
    	...
	TypeError: b must be an integer

Double negative float input:

    	>>> add_integer(-100.5, -10.8)
    	-110

two string:
	>>> add_integer("lion", "tiger")
	Traceback (most recent call last):
    	...
    	TypeError: a must be an integer

infinity:
	>>> add_integer(float('inf'))
    	Traceback (most recent call last):
    	...
	OverflowError: cannot convert float infinity to integer
