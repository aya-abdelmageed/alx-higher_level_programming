The 1-my_list module
_________________________________


Using 1-mylist
__________________________________

Import function from module:
    >>> MyList = __import__('1-my_list').MyList

Class Type test:
    >>> l = MyList()
    >>> type(l) == MyList
    True

Instance test:
    >>> l = MyList()
    >>> isinstance(l, list)
    True

print_sorted method return the list sorted:
    >>> type(MyList.__dict__['print_sorted'])
    <class 'function'>

print_sorted method called via class with no args:
    >>> l.__class__.print_sorted()
    Traceback (most recent call last):
    TypeError: print_sorted() missing 1 required positional argument: 'self'

print_sorted method called with 1 arg:
    >>> l.print_sorted([4, 2, 5])
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

print_sorted method called with 2 args:
    >>> l.print_sorted([4, 2, 5], 1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 3 were given

Empty list test:
    >>> l = MyList()
    >>> l.print_sorted()
    []

with infinite integer
    >>> l.append(int('inf'))
    Traceback (most recent call last):
    ValueError: invalid literal for int() with base 10: 'inf'

Normal list test:
    >>> l = MyList([8, 10, 5])
    >>> l.print_sorted()
    [5, 8, 10]

Normal list test 2:
    >>> l = MyList([1, 4, 2, 3, 5])
    >>> l.print_sorted()
    [1, 2, 3, 4, 5]

Negative ints list test:
    >>> l = MyList([-10, -8, -2325065, 0, -223434, -123])
    >>> l.print_sorted()
    [-2325065, -223434, -123, -10, -8, 0]

Original list unchanged:
    >>> l = MyList([2, 10, 1, -10, 40, 1000, 0])
    >>> l.print_sorted()
    [-10, 0, 1, 2, 10, 40, 1000]
    >>> ml
    [2, 10, 1, -10, 40, 1000, 0]

List already in order:
    >>> l = MyList([-10, 0, 1, 2, 10, 20, 100])
    >>> l.print_sorted()
    [-10, 0, 1, 2, 10, 20, 100]

Test append:
    >>> l = MyList()
    >>> l.append(7)
    >>> l.append(3)
    >>> l.append(0)
    >>> l.append(1)
    >>> l.print_sorted()
    [0, 1, 3, 7]

with negative values:
    >>> l.append(-15)
    >>> l.print_sorted()
    [-15, 0, 1, 3, 7]

when all elementes in the list are the same:
    >>> l.clear()
    >>> l.append(5)
    >>> l.append(5)
    >>> l.append(5)
    >>> l.append(5)
    >>> l.append(5)
    >>> l.print_sorted()
    [5, 5, 5, 5, 5]

with a max integer:
    >>> l.append(10000000000000000000000000000000000000000000)
    >>> l.print_sorted()
    [5, 5, 5, 5, 5, 10000000000000000000000000000000000000000000]

with None value:
    >>> l.append(None)
    >>> l.print_sorted()
    Traceback (most recent call last):
    TypeError: unorderable types: NoneType() < int()

with NULL value:
    >>> l.append(NULL)
    Traceback (most recent call last):
    NameError: name 'NULL' is not defined
